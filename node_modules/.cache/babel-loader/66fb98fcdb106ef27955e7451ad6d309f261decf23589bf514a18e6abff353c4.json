{"ast":null,"code":"import React from'react';import PokemonCard from'./PokemonCard';import{getPokemonsByType}from'../services/PokemonService';/**\n * Componente para mostrar una lista de Pokémon agrupados por tipo\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PokemonList=_ref=>{let{pokemons}=_ref;if(!pokemons||pokemons.length===0){return/*#__PURE__*/_jsx(\"div\",{className:\"text-center py-10 bg-white bg-opacity-70 rounded-xl shadow-md\",children:/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-500\",children:\"No se encontraron Pok\\xE9mon que coincidan con los criterios.\"})});}// Agrupar Pokémon por tipo\nconst pokemonsByType=getPokemonsByType(pokemons);// Orden de tipos (puedes personalizarlo)\nconst typeOrder=[\"Normal\",\"Fire\",\"Water\",\"Electric\",\"Grass\",\"Ice\",\"Fighting\",\"Poison\",\"Ground\",\"Flying\",\"Psychic\",\"Bug\",\"Rock\",\"Ghost\",\"Dragon\",\"Dark\",\"Steel\",\"Fairy\"];// Ordenar las claves de tipos según el orden establecido\nconst orderedTypes=Object.keys(pokemonsByType).sort((a,b)=>{const indexA=typeOrder.indexOf(a);const indexB=typeOrder.indexOf(b);// Si no está en la lista, ponerlo al final\nif(indexA===-1)return 1;if(indexB===-1)return-1;return indexA-indexB;});return/*#__PURE__*/_jsx(\"div\",{className:\"space-y-8\",children:orderedTypes.map(type=>/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white bg-opacity-70 rounded-xl p-4 shadow-md backdrop-blur-sm\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-semibold text-blue-800 mb-3 border-b border-blue-100 pb-2\",children:[\"Tipo: \",type,\" (\",pokemonsByType[type].length,\")\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\",children:pokemonsByType[type].map(pokemon=>/*#__PURE__*/_jsx(PokemonCard,{pokemon:pokemon},pokemon.name))})]},type))});};export default PokemonList;","map":{"version":3,"names":["React","PokemonCard","getPokemonsByType","jsx","_jsx","jsxs","_jsxs","PokemonList","_ref","pokemons","length","className","children","pokemonsByType","typeOrder","orderedTypes","Object","keys","sort","a","b","indexA","indexOf","indexB","map","type","pokemon","name"],"sources":["/Users/fatu/Documents/Progra /pokemon-explorer/frontend/src/components/PokemonList.js"],"sourcesContent":["import React from 'react';\nimport PokemonCard from './PokemonCard';\nimport { getPokemonsByType } from '../services/PokemonService';\n\n/**\n * Componente para mostrar una lista de Pokémon agrupados por tipo\n */\nconst PokemonList = ({ pokemons }) => {\n  if (!pokemons || pokemons.length === 0) {\n    return (\n      <div className=\"text-center py-10 bg-white bg-opacity-70 rounded-xl shadow-md\">\n        <p className=\"text-gray-500\">No se encontraron Pokémon que coincidan con los criterios.</p>\n      </div>\n    );\n  }\n  \n  // Agrupar Pokémon por tipo\n  const pokemonsByType = getPokemonsByType(pokemons);\n  \n  // Orden de tipos (puedes personalizarlo)\n  const typeOrder = [\n    \"Normal\", \"Fire\", \"Water\", \"Electric\", \"Grass\", \"Ice\", \"Fighting\", \"Poison\", \n    \"Ground\", \"Flying\", \"Psychic\", \"Bug\", \"Rock\", \"Ghost\", \"Dragon\", \"Dark\", \n    \"Steel\", \"Fairy\"\n  ];\n  \n  // Ordenar las claves de tipos según el orden establecido\n  const orderedTypes = Object.keys(pokemonsByType).sort((a, b) => {\n    const indexA = typeOrder.indexOf(a);\n    const indexB = typeOrder.indexOf(b);\n    \n    // Si no está en la lista, ponerlo al final\n    if (indexA === -1) return 1;\n    if (indexB === -1) return -1;\n    \n    return indexA - indexB;\n  });\n  \n  return (\n    <div className=\"space-y-8\">\n      {orderedTypes.map((type) => (\n        <div key={type} className=\"bg-white bg-opacity-70 rounded-xl p-4 shadow-md backdrop-blur-sm\">\n          <h3 className=\"text-lg font-semibold text-blue-800 mb-3 border-b border-blue-100 pb-2\">\n            Tipo: {type} ({pokemonsByType[type].length})\n          </h3>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {pokemonsByType[type].map((pokemon) => (\n              <PokemonCard key={pokemon.name} pokemon={pokemon} />\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PokemonList;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,OAASC,iBAAiB,KAAQ,4BAA4B,CAE9D;AACA;AACA,GAFA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAGA,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC/B,GAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACC,MAAM,GAAK,CAAC,CAAE,CACtC,mBACEN,IAAA,QAAKO,SAAS,CAAC,+DAA+D,CAAAC,QAAA,cAC5ER,IAAA,MAAGO,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,+DAA0D,CAAG,CAAC,CACxF,CAAC,CAEV,CAEA;AACA,KAAM,CAAAC,cAAc,CAAGX,iBAAiB,CAACO,QAAQ,CAAC,CAElD;AACA,KAAM,CAAAK,SAAS,CAAG,CAChB,QAAQ,CAAE,MAAM,CAAE,OAAO,CAAE,UAAU,CAAE,OAAO,CAAE,KAAK,CAAE,UAAU,CAAE,QAAQ,CAC3E,QAAQ,CAAE,QAAQ,CAAE,SAAS,CAAE,KAAK,CAAE,MAAM,CAAE,OAAO,CAAE,QAAQ,CAAE,MAAM,CACvE,OAAO,CAAE,OAAO,CACjB,CAED;AACA,KAAM,CAAAC,YAAY,CAAGC,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CAC9D,KAAM,CAAAC,MAAM,CAAGP,SAAS,CAACQ,OAAO,CAACH,CAAC,CAAC,CACnC,KAAM,CAAAI,MAAM,CAAGT,SAAS,CAACQ,OAAO,CAACF,CAAC,CAAC,CAEnC;AACA,GAAIC,MAAM,GAAK,CAAC,CAAC,CAAE,MAAO,EAAC,CAC3B,GAAIE,MAAM,GAAK,CAAC,CAAC,CAAE,MAAO,CAAC,CAAC,CAE5B,MAAO,CAAAF,MAAM,CAAGE,MAAM,CACxB,CAAC,CAAC,CAEF,mBACEnB,IAAA,QAAKO,SAAS,CAAC,WAAW,CAAAC,QAAA,CACvBG,YAAY,CAACS,GAAG,CAAEC,IAAI,eACrBnB,KAAA,QAAgBK,SAAS,CAAC,kEAAkE,CAAAC,QAAA,eAC1FN,KAAA,OAAIK,SAAS,CAAC,wEAAwE,CAAAC,QAAA,EAAC,QAC/E,CAACa,IAAI,CAAC,IAAE,CAACZ,cAAc,CAACY,IAAI,CAAC,CAACf,MAAM,CAAC,GAC7C,EAAI,CAAC,cAELN,IAAA,QAAKO,SAAS,CAAC,qEAAqE,CAAAC,QAAA,CACjFC,cAAc,CAACY,IAAI,CAAC,CAACD,GAAG,CAAEE,OAAO,eAChCtB,IAAA,CAACH,WAAW,EAAoByB,OAAO,CAAEA,OAAQ,EAA/BA,OAAO,CAACC,IAAyB,CACpD,CAAC,CACC,CAAC,GATEF,IAUL,CACN,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAlB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}